//import android.os.Build
//import android.util.Log
//import androidx.annotation.RequiresApi
//import androidx.lifecycle.viewModelScope
//import com.google.firebase.firestore.FirebaseFirestore
//import com.ph32395.staynow.TaoHopDong.MonthlyInvoiceSchedule
//import kotlinx.coroutines.launch
//import kotlinx.coroutines.tasks.await
//import java.text.SimpleDateFormat
//import java.util.Calendar
//import java.util.Locale
//
///**
// * T·∫°o l·ªãch h√≥a ƒë∆°n cho to√†n b·ªô th·ªùi h·∫°n h·ª£p ƒë·ªìng
// * @param contract Th√¥ng tin h·ª£p ƒë·ªìng
// * @param utilityFees Danh s√°ch ph√≠ d·ªãch v·ª•
// */
//@RequiresApi(Build.VERSION_CODES.O)
//fun generateInvoiceSchedule(
//    contract: com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.HopDong,
//    utilityFees: List<com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFee>
//): List<MonthlyInvoiceSchedule> {
//    val (fixedFees, variableFees) = categorizeUtilityFees(utilityFees)
//    val invoiceSchedules = mutableListOf<MonthlyInvoiceSchedule>()
//
//    val sdf = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
//    val startDate = sdf.parse(contract.startDate)
//    val endDate = sdf.parse(contract.endDate)
//
//    val calendar = Calendar.getInstance()
//    calendar.time = startDate
//
//    while (calendar.time.before(endDate)) {
//        // ƒê·∫∑t ng√†y thanh to√°n
//        val paymentCalendar = Calendar.getInstance()
//        paymentCalendar.time = calendar.time
//        paymentCalendar.set(Calendar.DAY_OF_MONTH, contract.paymentDay)
//
//        // N·∫øu ng√†y thanh to√°n nh·ªè h∆°n ng√†y hi·ªán t·∫°i, chuy·ªÉn sang th√°ng k·∫ø
//        if (paymentCalendar.time.before(calendar.time)) {
//            paymentCalendar.add(Calendar.MONTH, 1)
//        }
//
//        // X√°c ƒë·ªãnh k·ª≥ thanh to√°n
//        val periodStart = calendar.time
//        paymentCalendar.add(Calendar.MONTH, 1)
//        var periodEnd = paymentCalendar.time
//
//        // ƒêi·ªÅu ch·ªânh n·∫øu v∆∞·ª£t qu√° ng√†y k·∫øt th√∫c h·ª£p ƒë·ªìng
//        if (periodEnd.after(endDate)) {
//            periodEnd = endDate
//        }
//
//        // T√≠nh s·ªë ng√†y th·ª±c t·∫ø trong k·ª≥
//        val actualStayDays = ((periodEnd.time - periodStart.time) / (1000 * 60 * 60 * 24)).toInt() + 1
//        val totalDaysInMonth = paymentCalendar.getActualMaximum(Calendar.DAY_OF_MONTH)
//
//        val isFullMonth = actualStayDays > 27
//
//        val proRatedRoomPrice: Double
//        val fixedUtilityDetails: List<com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFeeDetail>
//
//        if (isFullMonth) {
//            proRatedRoomPrice = contract.financialInfo.monthlyRent
//            fixedUtilityDetails = fixedFees.map { fee ->
//                val quantity = when (fee.unit) {
//                    "Ng∆∞·ªùi" -> contract.peopleCount
//                    "Ph√≤ng" -> 1
//                    else -> 1
//                }
//                com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFeeDetail(
//                    name = fee.name,
//                    unitPrice = fee.amount,
//                    unit = fee.unit,
//                    quantity = quantity,
//                    subtotal = fee.amount * quantity
//                )
//            }
//        } else {
//            val dailyRoomRate = contract.financialInfo.monthlyRent / totalDaysInMonth
//            proRatedRoomPrice = dailyRoomRate * actualStayDays
//
//            fixedUtilityDetails = fixedFees.map { fee ->
//                val quantity = when (fee.unit) {
//                    "Ng∆∞·ªùi" -> contract.peopleCount
//                    "Ph√≤ng" -> 1
//                    else -> 1
//                }
//                val monthlyFee = fee.amount * quantity
//                val proRatedFee = (monthlyFee / totalDaysInMonth) * actualStayDays
//                com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFeeDetail(
//                    name = fee.name,
//                    unitPrice = fee.amount,
//                    unit = fee.unit,
//                    quantity = quantity,
//                    subtotal = proRatedFee
//                )
//            }
//        }
//
//        val invoiceForPeriod = MonthlyInvoiceSchedule(
//            contractId = contract.contractId,
//            invoicePeriodStart = sdf.format(periodStart),
//            invoicePeriodEnd = sdf.format(periodEnd),
//            paymentDueDate = sdf.format(periodEnd),
//            fixedUtilityFees = fixedUtilityDetails,
//            songayo = actualStayDays,
//            variableUtilityFees = variableFees.map { fee ->
//                com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFeeDetail(
//                    name = fee.name,
//                    unitPrice = fee.amount,
//                    unit = fee.unit,
//                    quantity = 0,
//                    subtotal = 0.0
//                )
//            },
//            roomPrice = proRatedRoomPrice,
//            totalAmount = proRatedRoomPrice + fixedUtilityDetails.sumOf { it.subtotal }
//        )
//
//        invoiceSchedules.add(invoiceForPeriod)
//
//        // C·∫≠p nh·∫≠t cho k·ª≥ ti·∫øp theo
//        calendar.time = periodEnd
//    }
//
//
//    // Ch·ªâ log khi c·∫ßn thi·∫øt, v√† c√≥ th·ªÉ s·ª≠ d·ª•ng debug build
//    Log.d("ContractViewModel", "===== B·∫¢NG L·ªäCH THANH TO√ÅN CHI TI·∫æT =====")
//    invoiceSchedules.forEachIndexed { index, invoice ->
//        Log.d("ContractViewModel", "\nüìÖ K·ª≤ THANH TO√ÅN ${index + 1}:")
//
//        // Log th√¥ng tin h·ª£p ƒë·ªìng
//        Log.d("ContractViewModel", "TH√îNG TIN H·ª¢P ƒê·ªíNG:")
//        Log.d("ContractViewModel", "- M√£ Hƒê: ${invoice.contractId}")
//        Log.d("ContractViewModel", "- S·ªë ng∆∞·ªùi ·ªü: ${contract.peopleCount}")
//        Log.d("ContractViewModel", "- S·ªë ph√≤ng: 1")
//
//        // Log th·ªùi gian
//        Log.d("ContractViewModel", "\n‚è∞ TH·ªúI GIAN:")
//        Log.d("ContractViewModel", "- Ng√†y b·∫Øt ƒë·∫ßu: ${invoice.invoicePeriodStart}")
//        Log.d("ContractViewModel", "- Ng√†y k·∫øt th√∫c: ${invoice.invoicePeriodEnd}")
//        Log.d("ContractViewModel", "- Ng√†y thanh to√°n: ${invoice.paymentDueDate}")
//        Log.d("ContractViewModel", "- S·ªë ng√†y ·ªü th·ª±c t·∫ø: ${invoice.songayo}")
//
//        // Chi ti·∫øt t√≠nh to√°n ti·ªÅn ph√≤ng
//        Log.d("ContractViewModel", "\nüè† T√çNH TO√ÅN TI·ªÄN PH√íNG:")
//        Log.d(
//            "ContractViewModel",
//            "- Gi√° ph√≤ng/th√°ng: ${contract.financialInfo.monthlyRent}"
//        )
//
//
//        // Chi ti·∫øt ph√≠ d·ªãch v·ª• c·ªë ƒë·ªãnh
//        Log.d("ContractViewModel", "\nüí° PH√ç D·ªäCH V·ª§ C·ªê ƒê·ªäNH:")
//        invoice.fixedUtilityFees.forEach { fee ->
//            Log.d("ContractViewModel", "- ${fee.name}:")
//            Log.d("ContractViewModel", "  ‚Ä¢ ƒê∆°n gi√° g·ªëc: ${fee.unitPrice}")
//            Log.d("ContractViewModel", "  ‚Ä¢ ƒê∆°n v·ªã t√≠nh: ${fee.unit}")
//            Log.d("ContractViewModel", "  ‚Ä¢ S·ªë l∆∞·ª£ng: ${fee.quantity}")
//            Log.d("ContractViewModel", "  ‚Ä¢ T·ªïng ti·ªÅn theo ng√†y: ${fee.subtotal}")
//        }
//
//        // Chi ti·∫øt ph√≠ d·ªãch v·ª• bi·∫øn ƒë·ªông
//        Log.d("ContractViewModel", "\nüíß PH√ç D·ªäCH V·ª§ BI·∫æN ƒê·ªòNG:")
//        invoice.variableUtilityFees.forEach { fee ->
//            Log.d("ContractViewModel", "- ${fee.name}:")
//            Log.d("ContractViewModel", "  ‚Ä¢ ƒê∆°n v·ªã t√≠nh: ${fee.unit}")
//            Log.d("ContractViewModel", "  ‚Ä¢ Ch∆∞a nh·∫≠p ch·ªâ s·ªë")
//        }
//
//        // T·ªïng k·∫øt
//        Log.d("ContractViewModel", "\nüí∞ T·ªîNG H·ª¢P:")
//        Log.d("ContractViewModel", "- Ti·ªÅn ph√≤ng: ${invoice.roomPrice}")
//        Log.d(
//            "ContractViewModel",
//            "- T·ªïng ph√≠ c·ªë ƒë·ªãnh: ${invoice.fixedUtilityFees.sumOf { it.subtotal }}"
//        )
//        Log.d("ContractViewModel", "- T·ªïng ti·ªÅn thanh to√°n: ${invoice.totalAmount}")
//
//        Log.d("ContractViewModel", "\n----------------------------")
//    }
//
//
//
//    return invoiceSchedules
//}
//
///**
// * L∆∞u l·ªãch h√≥a ƒë∆°n v√†o Firestore
// */
//fun saveInvoiceSchedule(
//    contractId: String,
//    invoiceSchedules: List<MonthlyInvoiceSchedule>,
//    onSuccess: () -> Unit,
//    onFailure: (Exception) -> Unit
//) {
//    viewModelScope.launch {
//        try {
//            val batch = FirebaseFirestore.getInstance().batch()
//
//            invoiceSchedules.forEach { schedule ->
//                val invoiceRef = db.collection("MonthlyInvoiceSchedules").document()
//                batch.set(invoiceRef, schedule)
//            }
//
//            batch.commit().await()
//            onSuccess()
//        } catch (e: Exception) {
//            onFailure(e)
//        }
//    }
//}
//
///**
// * C·∫≠p nh·∫≠t chi ph√≠ bi·∫øn ƒë·ªông cho m·ªôt h√≥a ƒë∆°n c·ª• th·ªÉ
// */
//fun updateVariableFeesForInvoice(
//    invoiceId: String,
//    variableFees: List<com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.UtilityFeeDetail>,
//    onSuccess: () -> Unit,
//    onFailure: (Exception) -> Unit
//) {
//    viewModelScope.launch {
//        try {
//            val invoiceRef = db.collection("MonthlyInvoiceSchedules").document(invoiceId)
//
//            // L·∫•y h√≥a ƒë∆°n hi·ªán t·∫°i
//            val currentInvoice = invoiceRef.get().await().toObject(MonthlyInvoiceSchedule::class.java)
//
//            // T√≠nh to√°n l·∫°i t·ªïng s·ªë ti·ªÅn
//            val updatedTotalAmount = currentInvoice?.let { invoice ->
//                invoice.roomPrice +
//                        invoice.fixedUtilityFees.sumOf { it.subtotal } +
//                        variableFees.sumOf { it.subtotal }
//            } ?: 0.0
//
//            // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
//            invoiceRef.update(
//                mapOf(
//                    "variableUtilityFees" to variableFees,
//                    "totalAmount" to updatedTotalAmount,
//                    "status" to com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.com.ph32395.staynow.TaoHopDong.InvoiceStatus.PENDING.name
//                )
//            ).await()
//
//            onSuccess()
//        } catch (e: Exception) {
//            onFailure(e)
//        }
//    }
//}